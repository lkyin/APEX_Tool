The Harmony project continues to grow in both community and code.On the community side, our mail list traffic continues to increase, with an all-time high of 1495 messages on the dev list in June. As of this writing, there are 895 messages so far for July. These numbers do not include any commit or JIRA traffic. Content of the list is fairly healthy, concerned with the technical aspects of both our virtual machines as well as the class library. Recent donations are increasing the diversity of participation in terms of individuals, with the majority of new faces participating in and around the virtual machine donation from Intel. Mail list traffic on the ppmc list is very low, and with the exception of one issue related to a contribution, pertains only to new committer and ppmc member discussion and votes. We have added 4 new committers, have several identified as potential, and have recently voted to add committers to the PPMC (although they haven't been notified as of this moment.On the technical side, we have been fortunate to continue to receive code from 3rd parties, primarily Intel. These donations represent code that was intended for Harmony but due to a combination of internal "process" backlog at Intel, as well as a sensitivity to the rate at which the community can digest and adopt the code, not all code was donated at once. We are very sensitive to ensuring that after a donation happens, any development on that continues in the project, and we constantly look for ways to enable people to help. We have recieved significant additions like Swing/AWT/Java 2D for the classlibrary, as well as the "DRLVM" modern virtual machine, which now gives us about 81% coverage of the Java 1.4 API (estimated at 78% of the Java 5 API, our target), as well as a VM to run that with modern garbage collection and JIT.We are currently working through the details of using public-domain code from Doug Lea for the "java.util.concurrent" package. This is the 'reference implementation' for this package, and used by Sun, among others. We wish to use this code (as it's considered the best implementation as well as the only one available to us), and further build a bridge between our community and the community surrounding this code (mainly the JSR-166 expert group, and organizations like us that use it.